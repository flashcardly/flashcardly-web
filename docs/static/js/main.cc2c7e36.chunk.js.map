{"version":3,"sources":["services/storage/storage.web.ts","services/storage/storage.stub.ts","providers/storage.provider.ts","features/flashcard/flashcard.tsx","pages/flashcard.page.tsx","services/deck-loader/deck-loader.web.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Storage","getValue","key","json","localStorage","getItem","Promise","resolve","then","JSON","parse","setValue","value","stringify","setItem","remove","hasKey","console","error","log","StorageProvider","React","createContext","Flashcard","deck","useState","index","setIndex","isFront","setIsFront","showRandomCard","Math","floor","random","length","useEffect","onClick","style","front","back","FlashCardPage","storage","useContext","setDeck","a","Array","isArray","name","fetch","res","initialize","className","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA0BeA,G,YAPC,CACdC,SApBsB,SAACC,GAAiB,IAAD,EACjCC,EAAI,UAAGC,aAAaC,QAAQH,UAAxB,QAAgC,OAE1C,OAAOI,QAAQC,UACZC,MAAK,kBAAMC,KAAKC,MAAMP,OAiBzBQ,SAdsB,SAACT,EAAaU,GACpC,IAAMT,EAAgB,MAATS,EACTH,KAAKI,UAAU,MACfJ,KAAKI,UAAUD,GAEnB,OAAON,QAAQC,UACZC,MAAK,kBAAMJ,aAAaU,QAAQZ,EAAKC,OASxCY,OANoB,aAOpBC,OANoB,eCKPhB,EAPC,CACdC,SAhBsB,SAACC,GAGvB,OAFAe,QAAQC,MAAM,2BACdD,QAAQE,IAAR,wBAA6BjB,IACtBI,QAAQC,WAcfI,SAXsB,SAACT,EAAaU,GAGpC,OAFAK,QAAQC,MAAM,2BACdD,QAAQE,IAAR,uBAA4BjB,IACrBI,QAAQC,WASfQ,OANoB,aAOpBC,OANoB,cCTPI,EADSC,IAAMC,cAA8BtB,G,4CCI/CuB,EAAY,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KACxB,EAA0BC,mBAAiB,GAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAiB,WACnBH,EAASI,KAAKC,MAAMD,KAAKE,SAAWT,EAAKU,SACzCL,GAAW,IAEfM,qBAAU,WACNL,MACD,IAMH,OACI,gCACI,sBAAKM,QANI,WACbP,GAAYD,IAKgBS,MAAO,CAAE,SAAY,WAAY,OAAU,QAAS,MAAS,QAAS,OAAU,kBAAmB,OAAU,SAAU,gBAAkB,WAAjK,UACI,6BAAKT,EAAUJ,EAAKE,GAAOY,MAAQd,EAAKE,GAAOa,OAC/C,qBAAKF,MAAO,CAAE,SAAY,WAAY,OAAU,KAAhD,SACI,mEAGR,wBAAQA,MAAO,CAAE,MAAS,QAAS,OAAU,gBAAiB,SAAY,OAAO,gBAAkB,UAAW,UAAY,QAAUD,QAASN,EAA7I,6BCSGU,EA/BO,SAAC,GAAQ,eAC7B,IAAMC,EAAUC,qBAAWtB,GAC3B,EAAwBK,mBAAiB,IAAzC,mBAAOD,EAAP,KAAamB,EAAb,KAiBA,OAdAR,qBAAU,YACQ,uCAAG,4BAAAS,EAAA,sEACAH,EAAQxC,SAAS,QADjB,UACbuB,EADa,OAEZqB,MAAMC,QAAQtB,GAFF,gCCbeuB,EDgBA,QCfpCC,MAAM,GAAD,ODesB,QCftB,YAAYD,EAAZ,UAAyBvC,MAAK,SAAAyC,GAAG,OAAIA,EAAI9C,UDYzB,cAGfqB,EAHe,gBAITiB,EAAQ9B,SAAS,OAAQa,GAJhB,OAOjBmB,EAAQnB,GAPS,kCCbA,IAAeuB,IDaf,OAAH,qDAUhBG,KACC,CAACT,IAECjB,EAAKU,OAKR,oCACE,oBAAIiB,UAAU,OAAd,0BACF,cAAC,EAAD,CAAW3B,KAAMA,OANV,kDEZI4B,MAVf,WACE,OACE,cAAC,EAAgBC,SAAjB,CAA0BzC,MAAOZ,EAAjC,SACE,qBAAKmD,UAAU,MAAf,SACE,cAAC,EAAD,SCIOG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc2c7e36.chunk.js","sourcesContent":["export const getValue = (key: string) => {\n  const json = localStorage.getItem(key) ?? \"null\";\n\n  return Promise.resolve()\n    .then(() => JSON.parse(json));\n};\n\nexport const setValue = (key: string, value: any) => {\n  const json = value == null\n    ? JSON.stringify(null)\n    : JSON.stringify(value);\n\n  return Promise.resolve()\n    .then(() => localStorage.setItem(key, json));\n};\n\nexport const remove = () => {};\nexport const hasKey = () => {};\n\nconst Storage = {\n  getValue,\n  setValue,\n  remove,\n  hasKey,\n};\n\nexport default Storage;\n","export const getValue = (key: string) => {\n  console.error(\"Storage not implemented\");\n  console.log(`tried to load ${key}`);\n  return Promise.resolve() as Promise<any>;\n};\n\nexport const setValue = (key: string, value: any) => {\n  console.error(\"Storage not implemented\");\n  console.log(`tried to set ${key}`);\n  return Promise.resolve() as Promise<void>;\n};\n\nexport const remove = () => {};\nexport const hasKey = () => {};\n\nconst Storage = {\n  getValue,\n  setValue,\n  remove,\n  hasKey,\n};\n\nexport default Storage;\n","import React from \"react\";\nimport Storage from \"../services/storage/storage.stub\";\n\nconst StorageProvider = React.createContext<typeof Storage>(Storage);\nexport default StorageProvider;\n","import React, { useState, useEffect } from 'react'\nimport type { Card } from '../../types/types'\n/*\n\n*/\ntype FlashcardProps = { deck: Card[] }\n\nexport const Flashcard = ({ deck }: FlashcardProps): JSX.Element => {\n    const [index, setIndex] = useState<number>(0);\n    const [isFront, setIsFront] = useState<boolean>(true);\n    const showRandomCard = () => {\n        setIndex(Math.floor(Math.random() * deck.length));\n        setIsFront(true);\n    }\n    useEffect(() => {\n        showRandomCard();\n    }, [])\n\n    const flipcard = () => {\n        setIsFront(!isFront);\n    }\n\n    return (\n        <div>\n            <div onClick={flipcard} style={{ \"position\": \"relative\", \"height\": \"300px\", \"width\": \"500px\", \"border\": \"2px solid black\", \"margin\": \"0 auto\", \"backgroundColor\":\"#f0ffff\" }}>\n                <h1>{isFront ? deck[index].front : deck[index].back}</h1>\n                <div style={{ \"position\": \"absolute\", \"bottom\": \"0\" }}>\n                    <span>click card to show reverse</span>\n                </div>\n            </div>\n            <button style={{ \"width\": \"200px\", \"border\": \"rgb(30,30,30)\", \"fontSize\": \"24px\",\"backgroundColor\":\"#88ABFB\", \"marginTop\":\"20px\" }} onClick={showRandomCard}>Random Card</button>\n        </div>\n    )\n}","import React, {useContext, useState, useEffect} from 'react'\nimport StorageProvider from '../providers/storage.provider'\n// TODO: refactor this to be platform-agnostic\nimport { getDeck } from \"../services/deck-loader/deck-loader.web\";\nimport { Flashcard } from '../features/flashcard/flashcard';\nimport {Card} from '../types/types'\n\n\nconst FlashCardPage = ({}) => {\n  const storage = useContext(StorageProvider);\n  const [deck, setDeck] = useState<Card[]>([]);\n  \n\n  useEffect(() => {\n    const initialize = async () => {\n      let deck = await storage.getValue(\"deck\");\n      if (!Array.isArray(deck)) {\n        deck = await getDeck(\"/data\", \"ES-EN\");\n        await storage.setValue(\"deck\", deck);\n      }\n\n      setDeck(deck);\n    };\n\n    initialize();\n  }, [storage]);\n\n  if (!deck.length) {\n    return <article>...loading</article>;\n  }\n\n  return (\n    <article>\n      <h1 className=\"logo\">Flashcardly!</h1>\n    <Flashcard deck={deck}/>\n    </article>\n  );\n};\n\nexport default FlashCardPage;\n","\nexport const getDeck = (root: string, name: string) =>\n  fetch(`${root}/${name}.json`).then(res => res.json());\n","import React from 'react';\nimport './App.css';\nimport Storage from \"./services/storage/storage.web\";\nimport StorageProvider from \"./providers/storage.provider\";\nimport FlashCardPage from \"./pages/flashcard.page\";\n\nfunction App() {\n  return (\n    <StorageProvider.Provider value={Storage}>\n      <div className=\"App\">\n        <FlashCardPage />\n      </div>\n    </StorageProvider.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}