{"version":3,"sources":["services/storage/storage.web.ts","services/storage/storage.stub.ts","providers/storage.provider.ts","features/options/options.context.tsx","features/options/options.provider.tsx","features/flashcard/flashcard3d.tsx","features/options/useOptions.hook.ts","features/flashcard/flashcard.tsx","features/options/Options.tsx","pages/useDeck.hook.ts","services/deck-loader/deck-loader.web.ts","pages/flashcard.page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Storage","getValue","key","json","localStorage","getItem","Promise","resolve","then","JSON","parse","setValue","value","stringify","setItem","remove","hasKey","console","error","log","StorageProvider","React","createContext","OptionsContext","options","selectedDeck","theme","animation","setOptions","OptionsProvider","children","browserTheme","window","matchMedia","matches","useState","storage","useContext","useEffect","storedOptions","newOptions","Object","entries","reduce","defaultValue","Provider","Flashcard3d","deck","index","setIndex","isFront","setIsFront","cardRef","useRef","showRandomCard","Math","floor","random","length","current","style","transform","startAngle","endAngle","card","front","back","className","perspective","onClick","element","keyframes","animate","duration","easing","finish","reverse","addEventListener","once","ref","height","transformStyle","WebkitBackfaceVisibility","useOptions","Flashcard","Component","deckManifest","fileName","title","Options","onUpdate","updateOptions","onChange","e","filename","target","paddingLeft","map","name","type","checked","useDeck","initialized","setInitialized","setDeck","loadDeck","root","fetch","res","setExistingDeck","FlashCardPage","paddingTop","AppRoot","isLightTheme","newTheme","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPA0BeA,G,MAPC,CACdC,SApBsB,SAACC,GAAiB,IAAD,EACjCC,EAAI,UAAGC,aAAaC,QAAQH,UAAxB,QAAgC,OAE1C,OAAOI,QAAQC,UACZC,MAAK,kBAAMC,KAAKC,MAAMP,OAiBzBQ,SAdsB,SAACT,EAAaU,GACpC,IAAMT,EAAgB,MAATS,EACTH,KAAKI,UAAU,MACfJ,KAAKI,UAAUD,GAEnB,OAAON,QAAQC,UACZC,MAAK,kBAAMJ,aAAaU,QAAQZ,EAAKC,OASxCY,OANoB,aAOpBC,OANoB,eCKPhB,EAPC,CACdC,SAhBsB,SAACC,GAGvB,OAFAe,QAAQC,MAAM,2BACdD,QAAQE,IAAR,wBAA6BjB,IACtBI,QAAQC,WAcfI,SAXsB,SAACT,EAAaU,GAGpC,OAFAK,QAAQC,MAAM,2BACdD,QAAQE,IAAR,uBAA4BjB,IACrBI,QAAQC,WASfQ,OANoB,aAOpBC,OANoB,cCTPI,EADSC,IAAMC,cAA8BtB,G,OCK7CuB,EALQD,wBAA4B,CACjDE,QAAS,CAAEC,aAAc,GAAKC,MAAO,QAAUC,UAAW,MAC1DC,WAAY,e,OC8BCC,EA9BS,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,SACnBC,EAAeC,OAAOC,WAAW,gCAAgCC,QACnE,OAAS,QAEb,EAA8BC,mBAAkB,CAAEV,aAAc,QAASC,MAAOK,EAAcJ,UAAW,OAAzG,mBAAOH,EAAP,KAAgBI,EAAhB,KACMQ,EAAUC,qBAAWrC,GAkB3B,OAhBAsC,qBAAU,WACRF,EAAQnC,SAAS,eACdO,MAAK,SAAC+B,GACL,GAAKA,EAAL,CAGA,IAAMC,EAAaC,OAAOC,QAAQlB,GAC/BmB,QAAO,SAACnB,EAAD,GAAmC,IAAD,qBAAvBtB,EAAuB,KAAlB0C,EAAkB,KAClChC,EAAK,UAAG2B,EAAcrC,UAAjB,QAAyB0C,EACpC,OAAO,2BAAKpB,GAAZ,kBAAsBtB,EAAMU,MAC3B,IAELgB,EAAWY,SAEd,IAGD,cAAC,EAAeK,SAAhB,CAAyBjC,MAAO,CAAEY,UAASI,cAA3C,SACGE,K,OCrBMgB,G,MAAc,SAAC,GAA2C,IAAD,EAAxCC,EAAwC,EAAxCA,KAC1B,EAA0BZ,mBAAiB,GAA3C,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAA8Bd,oBAAkB,GAAhD,mBAAOe,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,iBAAuB,MAEjCC,EAAiB,WACnBL,EAASM,KAAKC,MAAMD,KAAKE,SAAWV,EAAKW,SACzCP,GAAW,GACKC,EAAQO,QACfC,MAAMC,UAAYC,EAAWD,WAG1CvB,qBAAU,WACNgB,MACD,CAACP,IAEJ,IAAMe,EAAa,CAAED,UAAW,oBAC1BE,EAAW,CAAEF,UAAW,oBA4BxBG,EAAI,UAAGjB,EAAKC,UAAR,QAAkB,CAAEiB,MAAO,GAAIC,KAAM,IAC/C,OACI,gCACI,qBAAKC,UAAU,OAAOP,MAAO,CAAEQ,YAAa,UAA5C,SACI,sBACIC,QA/BC,WACb,GAAKjB,EAAQO,QAAb,CACA,IAAMW,EAAUlB,EAAQO,QAClBY,EAAY,CAACT,EAAYC,GAGzBpC,EAAY2C,EAAQE,QAAQD,EAFnB,CAAEE,SAAU,IAAKC,OAAQ,gBAInCxB,IACDvB,EAAUgD,SACVhD,EAAUiD,WAEdjD,EAAUkD,iBAAiB,UAAU,WACjCP,EAAQV,MAAMC,UAAaX,EAEvBa,EAASF,UADTC,EAAWD,YAEhB,CAAEiB,MAAM,IACX3B,GAAYD,KAeA6B,IAAK3B,EACLQ,MAAO,CAACoB,OAAO,QAASC,eAAgB,eAH5C,UAII,qBAAKd,UAAU,aAAaP,MAAO,CAAEsB,yBAAyB,UAA9D,SAA2ElB,EAAKC,QAChF,qBAAKE,UAAU,aAAaP,MAAO,CAAEsB,yBAAyB,SAAUrB,UAAW,mBAAnF,SAAyGG,EAAKE,YAGtH,8BACI,gEAEJ,wBACIC,UAAU,uBACVE,QAxBE,WACVlB,GAAW,GACXG,KAoBI,8BChEC6B,EAAa,WACxB,MAAgC9C,qBAAWd,GAAnCC,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,WACXQ,EAAUC,qBAAWrC,GAO3B,MAAO,CAACwB,EALc,SAACA,GACrBY,EAAQzB,SAAS,cAAea,GAC7BhB,MAAK,kBAAMoB,EAAWJ,SCHhB4D,EAAY,SAAC,GAA4B,IAA3BrC,EAA0B,EAA1BA,KACvB,EAA8BoC,IAA9B,mBAAO3D,EAAP,KAMM6D,GANN,KACmB,CACjB,KAAMvC,EACN,KAAMA,GAGqBtB,EAAQG,YACrC,OAAO,cAAC0D,EAAD,CAAWtC,KAAMA,KCRtBuC,EAAe,CACjB,CACIC,SAAU,QACVC,MAAO,sBAEX,CACID,SAAU,QACVC,MAAO,qBAEX,CACID,SAAU,QACVC,MAAO,sBAEX,CACID,SAAU,QACVC,MAAO,sBAQFC,EAAU,SAAC,GAA+B,EAA7BC,SACNrD,qBAAWjB,GADyB,IAEpD,EAAiC+D,IAAjC,mBAAO3D,EAAP,KAAgBmE,EAAhB,KAWA,OACI,kCACI,2BAAUxB,UAAU,cAAcyB,SAZf,SAACC,GAC1B,IAAMC,EAAYD,EAAEE,OAA4BnF,MAC1C4B,EAAU,2BACXhB,GADW,IAEdC,aAAcqE,IAGhBH,EAAcnD,IAKR,UACI,wBAAQ2B,UAAU,gBAAlB,8BACA,oBAAIP,MAAO,CAAC,QAAW,eAAgB,UAAa,OAAQoC,YAAa,KAAzE,SACKV,EAAaW,KAAI,SAAClD,GAAD,OACd,oBAAIoB,UAAU,cAAcP,MAAO,CAAE,UAAa,QAAlD,SACI,kCACI,uBACIhD,MAAOmC,EAAKwC,SACZW,KAAK,OACLC,KAAK,QACLC,QAAS5E,EAAQC,eAAiBsB,EAAKwC,WAL/C,OAOY,+BAAOxC,EAAKyC,wBCpDvCa,EAAU,WACrB,MAAkBlB,IAAX3D,EAAP,oBACA,EAAsCW,oBAAS,GAA/C,mBAAOmE,EAAP,KAAoBC,EAApB,KACA,EAAwBpE,mBAAe,IAAvC,mBAAOY,EAAP,KAAayD,EAAb,KACMpE,EAAUC,qBAAWrC,GAErByG,EAAW,SAACX,GAAD,OCXKY,EDYZ,QCZ0BR,EDYjBJ,ECXnBa,MAAM,GAAD,OAAID,EAAJ,YAAYR,EAAZ,UAAyB1F,MAAK,SAAAoG,GAAG,OAAIA,EAAIzG,WDYzCK,MAAK,SAAAuC,GAAI,OACRX,EAAQzB,SAAS,OAAQoC,GACtBvC,MAAK,kBAAMgG,EAAQzD,SCfP,IAAC2D,EAAcR,GDiCpC,OAhBA5D,qBAAU,WAIRF,EAAQnC,SAAS,QACdO,MAAK,SAAAuC,GAAI,OAAMA,EAJM,SAACA,GAAD,OACtBzC,QAAQC,QAAQwC,GAAMvC,KAAKgG,GAIvBK,CAAgB9D,GAChB0D,EAASjF,EAAQC,iBACpBjB,MAAK,kBAAM+F,GAAe,QAC5B,IAEHjE,qBAAU,WACHgE,GACLG,EAASjF,EAAQC,gBACjB,CAACD,EAAQC,eAEJ,CAACsB,IEPK+D,EArBO,SAAC,GAAQ,eAC7B,MAAkB3B,IAClB,GADA,oBACekB,KAARtD,EAAP,oBAEA,OAAKA,EAAKW,OAKR,oCACE,oBAAIS,UAAU,OAAd,0BACA,kCACE,cAAC,EAAD,CAAWpB,KAAMA,MAEnB,yBAASa,MAAO,CAAEmD,WAAY,QAA9B,SACE,cAAC,EAAD,SAVG,kDCOX,IAAMC,EAAU,WACd,MAA8B7B,IAA9B,mBAAO3D,EAAP,KAAgBI,EAAhB,KACQF,EAAUF,EAAVE,MACFuF,EAAyB,UAAVvF,EAOrB,OACE,sBAAKyC,UAAS,cAASzC,GAAvB,UACE,qBAAKyC,UAAU,mBAAf,SACE,wBAAOA,UAAU,SAAjB,UACE,uBAAOyB,SAVM,WACnB,IAAMsB,EAAWD,EAAe,OAAS,QACzCrF,EAAW,2BAAKJ,GAAN,IAAeE,MAAOwF,MAQKd,QAASa,EAAcd,KAAK,aAC3D,uBAAMhC,UAAU,eAAhB,UACE,sBAAMA,UAAU,mBAAhB,0BACA,sBAAMA,UAAU,oBAAhB,kCAIN,cAAC,EAAD,QAKSgD,EApCf,WACE,OACE,cAAC,EAAgBtE,SAAjB,CAA0BjC,MAAOZ,EAAjC,SACE,cAAC,EAAD,UACE,cAAC,EAAD,SCEOoH,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB9G,MAAK,YAAkD,IAA/C+G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27f5bce3.chunk.js","sourcesContent":["export const getValue = (key: string) => {\n  const json = localStorage.getItem(key) ?? \"null\";\n\n  return Promise.resolve()\n    .then(() => JSON.parse(json));\n};\n\nexport const setValue = (key: string, value: any) => {\n  const json = value == null\n    ? JSON.stringify(null)\n    : JSON.stringify(value);\n\n  return Promise.resolve()\n    .then(() => localStorage.setItem(key, json));\n};\n\nexport const remove = () => {};\nexport const hasKey = () => {};\n\nconst Storage = {\n  getValue,\n  setValue,\n  remove,\n  hasKey,\n};\n\nexport default Storage;\n","export const getValue = (key: string) => {\n  console.error(\"Storage not implemented\");\n  console.log(`tried to load ${key}`);\n  return Promise.resolve() as Promise<any>;\n};\n\nexport const setValue = (key: string, value: any) => {\n  console.error(\"Storage not implemented\");\n  console.log(`tried to set ${key}`);\n  return Promise.resolve() as Promise<void>;\n};\n\nexport const remove = () => {};\nexport const hasKey = () => {};\n\nconst Storage = {\n  getValue,\n  setValue,\n  remove,\n  hasKey,\n};\n\nexport default Storage;\n","import React from \"react\";\nimport Storage from \"../services/storage/storage.stub\";\n\nconst StorageProvider = React.createContext<typeof Storage>(Storage);\nexport default StorageProvider;\n","import { createContext } from \"react\";\nimport { OptionsState } from \"./options.types\";\n\nconst OptionsContext = createContext<OptionsState>({\n  options: { selectedDeck: \"\" , theme: \"light\" , animation: \"3D\"},\n  setOptions: () => {}\n});\n\nexport default OptionsContext;\n\n// const useOptions = () => {\n//   const { state, setState } = useContext(OptionsContext);\n//   return [state, setState];\n// };\n\n// const Component = () => {\n//   const [options, setOptions] = useOptions();\n//   return null;\n// };\n\n\n// render(<OptionsContext.Provider value={{ state: {}, setState: () => {} }}><Component /></OptionsContext.Provider>)","import React, {useState, useEffect, useContext} from \"react\";\nimport Storage from \"../../providers/storage.provider\";\nimport {Options} from \"./options.types\";\nimport OptionsContext from \"./options.context\";\n\nconst OptionsProvider = ({ children }: { children: React.ReactChildren | React.ReactChild | null }) => {\n  const browserTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ? \"dark\" : \"light\";\n  \n  const [options, setOptions] = useState<Options>({ selectedDeck: \"ES-EN\", theme: browserTheme, animation: \"3D\" });\n  const storage = useContext(Storage);\n\n  useEffect(() => {\n    storage.getValue(\"preferences\")\n      .then((storedOptions: Options) => {\n        if (!storedOptions)\n          return;\n\n        const newOptions = Object.entries(options)\n          .reduce((options, [key, defaultValue]) => {\n            const value = storedOptions[key] ?? defaultValue;\n            return { ...options, [key]: value };\n          }, {} as Partial<Options>);\n\n        setOptions(newOptions as Options);\n      });\n  }, []);\n\n  return (\n    <OptionsContext.Provider value={{ options, setOptions }}>\n      {children}\n    </OptionsContext.Provider>\n  );\n};\n\nexport default OptionsProvider;\n","import React, { useState, useEffect, useRef } from 'react'\nimport type { Card } from '../../types/types'\nimport \"./flashcard.css\";\n/*\n- front -> back (flipping animation)\n- back -> front (flipping animation)\n*/\ntype FlashcardProps = { deck: Card[] };\n\nexport const Flashcard3d = ({ deck }: FlashcardProps): JSX.Element => {\n    const [index, setIndex] = useState<number>(0);\n    const [isFront, setIsFront] = useState<boolean>(true);\n    const cardRef = useRef<HTMLDivElement>(null);\n\n    const showRandomCard = () => {\n        setIndex(Math.floor(Math.random() * deck.length));\n        setIsFront(true);\n        const element = cardRef.current;\n        element!.style.transform = startAngle.transform;\n    };\n\n    useEffect(() => {\n        showRandomCard();\n    }, [deck]);\n\n    const startAngle = { transform: \"rotateY(0.0turn)\" };\n    const endAngle = { transform: \"rotateY(0.5turn)\" };\n\n    const flipCard = () => {\n        if (!cardRef.current) return;\n        const element = cardRef.current;\n        const keyframes = [startAngle, endAngle];\n        const timing = { duration: 700, easing: \"ease-in-out\" };\n\n        const animation = element.animate(keyframes, timing);\n\n        if (!isFront) {\n            animation.finish();\n            animation.reverse();\n        }\n        animation.addEventListener(\"finish\", () => {\n            element.style.transform = !isFront\n              ? startAngle.transform\n              : endAngle.transform;\n        }, { once: true });\n        setIsFront(!isFront);\n    }\n    const reset = () => {\n        setIsFront(true);\n        showRandomCard();\n    }\n\n\n    // const rotation = isFront ? `rotateY(0turn)` : `rotateY(0.5turn)`;\n    const card = deck[index] ?? { front: \"\", back: \"\" };\n    return (\n        <div>\n            <div className=\"card\" style={{ perspective: \"1000px\"}}>\n                <div\n                    onClick={flipCard}\n                    ref={cardRef}\n                    style={{height:\"300px\", transformStyle: \"preserve-3d\" }}>\n                    <div className=\"card__face\" style={{ WebkitBackfaceVisibility:\"hidden\" }}>{card.front}</div>\n                    <div className=\"card__face\" style={{ WebkitBackfaceVisibility:\"hidden\", transform: \"rotateY(180deg)\" }}>{card.back}</div>\n                </div>\n            </div>\n            <div>\n                <span>click card to show reverse</span>\n            </div>\n            <button\n                className=\"show_random_card_btn\"\n                onClick={reset}>\n                Random Card\n            </button>\n\n        </div>\n    )\n}","import { useContext } from \"react\";\nimport Storage from \"../../providers/storage.provider\";\nimport OptionsContext from \"./options.context\";\nimport { Options } from \"./options.types\";\n\nexport const useOptions = () => {\n  const { options, setOptions } = useContext(OptionsContext);\n  const storage = useContext(Storage);\n\n  const updateOptions = (options: Options) => {\n    storage.setValue(\"preferences\", options)\n      .then(() => setOptions(options));\n  };\n\n  return [options, updateOptions] as const;\n};\n\n/*\n  TODO:\n    integrate into Options component\n    integrate into FlashCard page\n    integrate into Deck hook\n\n    - make an OptionsProvider component which wraps OptionsContext and\n      - handles state / setState so that App doesn't need to\n      - handles the initialization useEffect so that nothing further down the app needs to \n*/","import React from 'react'\nimport { Flashcard2d } from './flashcard2d'\nimport { Flashcard3d } from './flashcard3d'\nimport {useOptions} from '../options/useOptions.hook'\nimport type { Card } from '../../types/types'\n\ntype FlashcardProps = { deck: Card[] };\n\nexport const Flashcard = ({deck}: FlashcardProps) => {\n    const [options, setOptions] = useOptions();\n    const components = {\n      \"2D\": Flashcard3d,\n      \"3D\": Flashcard3d\n    };\n\n    const Component = components[options.animation];\n    return <Component deck={deck}/>;\n}\n","import { useContext } from 'react'\nimport StorageProvider from '../../providers/storage.provider'\nimport {\n    // usePreferences,\n    Preferences\n} from './usePreferences.hook'\nimport {useOptions} from './useOptions.hook'\n\nconst deckManifest = [\n    {\n        fileName: \"ES-EN\",\n        title: \"Spanish to English\"\n    },\n    {\n        fileName: \"FR-EN\",\n        title: \"French to English\"\n    },\n    {\n        fileName: \"EN-ES\",\n        title: \"English to Spanish\"\n    },\n    {\n        fileName: \"EN-FR\",\n        title: \"English to French\"\n    },\n];\n\ntype OptionsProps = {\n  onUpdate?: (preferences: Preferences) => void;\n};\n\nexport const Options = ({ onUpdate }: OptionsProps) => {\n    const storage = useContext(StorageProvider);\n    const [options, updateOptions] = useOptions();\n    const updateSelectedDeck = (e: any) => {\n      const filename = (e.target as HTMLInputElement).value;\n      const newOptions = {\n        ...options,\n        selectedDeck: filename\n      };\n\n      updateOptions(newOptions);\n    };\n\n    return (\n        <section>\n            <fieldset className=\"option-list\" onChange={updateSelectedDeck}>\n                <legend className=\"option-header\">Choose your deck</legend>\n                <ul style={{\"display\": \"inline-block\", \"listStyle\": \"none\", paddingLeft: \"0\" }}>\n                    {deckManifest.map((deck) => \n                        <li className=\"option-card\" style={{ \"textAlign\": \"left\"}}>\n                            <label>\n                                <input\n                                    value={deck.fileName}\n                                    name=\"deck\"\n                                    type=\"radio\"\n                                    checked={options.selectedDeck === deck.fileName}\n                                    />&nbsp;\n                                        <span>{deck.title}</span>\n                            </label>\n                        </li>\n                    )}\n                </ul>\n            </fieldset>\n        </section>\n\n    )\n\n}\n\n","import {useContext, useEffect, useState, useCallback} from 'react'\nimport Storage from '../providers/storage.provider'\nimport {useOptions} from '../features/options/useOptions.hook'\nimport {getDeck} from '../services/deck-loader/deck-loader.web'\nimport {Deck} from '../types/types'\n\nexport const useDeck = () => {\n  const [options] = useOptions();\n  const [initialized, setInitialized] = useState(false);\n  const [deck, setDeck] = useState<Deck>([]);\n  const storage = useContext(Storage);\n\n  const loadDeck = (filename: string) =>\n    getDeck(\"/data\", filename)\n      .then(deck =>\n        storage.setValue(\"deck\", deck)\n          .then(() => setDeck(deck)));\n\n  useEffect(() => {\n    const setExistingDeck = (deck: Deck) =>\n      Promise.resolve(deck).then(setDeck);\n\n    storage.getValue(\"deck\")\n      .then(deck => !!deck\n        ? setExistingDeck(deck)\n        : loadDeck(options.selectedDeck))\n      .then(() => setInitialized(true));\n  }, []);\n\n  useEffect(() => {\n    if (!initialized) return;\n    loadDeck(options.selectedDeck);\n  },[options.selectedDeck]);\n\n  return [deck];\n}","\nexport const getDeck = (root: string, name: string) =>\n  fetch(`${root}/${name}.json`).then(res => res.json());\n","// TODO: refactor this to be platform-agnostic\nimport { Flashcard } from '../features/flashcard/flashcard';\nimport {Options} from '../features/options/Options'\nimport { useOptions } from \"../features/options/useOptions.hook\";\nimport { useDeck } from \"./useDeck.hook\";\n\nconst FlashCardPage = ({}) => {\n  const [options] = useOptions();\n  const [deck] = useDeck(); \n\n  if (!deck.length) {\n    return <article>...loading</article>;\n  }\n\n  return (\n    <article>\n      <h1 className=\"logo\">Flashcardly!</h1>\n      <section>\n        <Flashcard deck={deck}/>\n      </section>\n      <section style={{ paddingTop: \"2rem\" }}>\n        <Options />\n      </section>\n    </article>\n  );\n};\n\nexport default FlashCardPage;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Storage from \"./services/storage/storage.web\";\nimport StorageProvider from \"./providers/storage.provider\";\nimport OptionsProvider from \"./features/options/options.provider\";\nimport FlashCardPage from \"./pages/flashcard.page\";\nimport { useOptions } from \"./features/options/useOptions.hook\";\n\nfunction App() {\n  return (\n    <StorageProvider.Provider value={Storage}>\n      <OptionsProvider>\n        <AppRoot />\n      </OptionsProvider>\n    </StorageProvider.Provider>\n  );\n}\n\nconst AppRoot = () => {\n  const [options, setOptions] = useOptions();\n  const { theme } = options;\n  const isLightTheme = theme === 'light';\n  const toggleToggle = () => {\n    const newTheme = isLightTheme ? \"dark\" : \"light\";\n    setOptions({ ...options, theme: newTheme });\n  }\n  // switch in left pos is off (light)\n  //                       on (dark)\n  return (\n    <div className={`App ${theme}`}>\n      <div className=\"switch-container\">\n        <label className=\"switch\">\n          <input onChange={toggleToggle} checked={isLightTheme} type=\"checkbox\" />\n          <span className=\"slider round\">\n            <span className=\"theme-icon--dark\">🌕</span>\n            <span className=\"theme-icon--light\">🌞</span>\n          </span>\n        </label>\n      </div>\n      <FlashCardPage />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}