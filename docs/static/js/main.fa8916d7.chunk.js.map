{"version":3,"sources":["services/storage/storage.web.ts","services/storage/storage.stub.ts","providers/storage.provider.ts","features/options/options.context.tsx","features/options/options.provider.tsx","features/flashcard/flashcard.tsx","features/options/useOptions.hook.ts","features/options/Options.tsx","pages/useDeck.hook.ts","services/deck-loader/deck-loader.web.ts","pages/flashcard.page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Storage","getValue","key","json","localStorage","getItem","Promise","resolve","then","JSON","parse","setValue","value","stringify","setItem","remove","hasKey","console","error","log","StorageProvider","React","createContext","OptionsContext","options","selectedDeck","setOptions","OptionsProvider","children","useState","storage","useContext","useEffect","storedOptions","Provider","Flashcard","deck","index","setIndex","isFront","setIsFront","showRandomCard","Math","floor","random","length","card","front","back","text","onClick","style","useOptions","deckManifest","fileName","title","Options","onUpdate","updateOptions","onChange","e","filename","target","newOptions","paddingLeft","map","name","type","checked","useDeck","initialized","setInitialized","setDeck","loadDeck","root","fetch","res","setExistingDeck","FlashCardPage","className","paddingTop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa8916d7.chunk.js","sourcesContent":["export const getValue = (key: string) => {\n  const json = localStorage.getItem(key) ?? \"null\";\n\n  return Promise.resolve()\n    .then(() => JSON.parse(json));\n};\n\nexport const setValue = (key: string, value: any) => {\n  const json = value == null\n    ? JSON.stringify(null)\n    : JSON.stringify(value);\n\n  return Promise.resolve()\n    .then(() => localStorage.setItem(key, json));\n};\n\nexport const remove = () => {};\nexport const hasKey = () => {};\n\nconst Storage = {\n  getValue,\n  setValue,\n  remove,\n  hasKey,\n};\n\nexport default Storage;\n","export const getValue = (key: string) => {\n  console.error(\"Storage not implemented\");\n  console.log(`tried to load ${key}`);\n  return Promise.resolve() as Promise<any>;\n};\n\nexport const setValue = (key: string, value: any) => {\n  console.error(\"Storage not implemented\");\n  console.log(`tried to set ${key}`);\n  return Promise.resolve() as Promise<void>;\n};\n\nexport const remove = () => {};\nexport const hasKey = () => {};\n\nconst Storage = {\n  getValue,\n  setValue,\n  remove,\n  hasKey,\n};\n\nexport default Storage;\n","import React from \"react\";\nimport Storage from \"../services/storage/storage.stub\";\n\nconst StorageProvider = React.createContext<typeof Storage>(Storage);\nexport default StorageProvider;\n","import { createContext } from \"react\";\nimport { OptionsState } from \"./options.types\";\n\nconst OptionsContext = createContext<OptionsState>({\n  options: { selectedDeck: \"\" },\n  setOptions: () => {}\n});\n\nexport default OptionsContext;\n\n// const useOptions = () => {\n//   const { state, setState } = useContext(OptionsContext);\n//   return [state, setState];\n// };\n\n// const Component = () => {\n//   const [options, setOptions] = useOptions();\n//   return null;\n// };\n\n\n// render(<OptionsContext.Provider value={{ state: {}, setState: () => {} }}><Component /></OptionsContext.Provider>)","import React, {useState, useEffect, useContext} from \"react\";\nimport Storage from \"../../providers/storage.provider\";\nimport {Options} from \"./options.types\";\nimport OptionsContext from \"./options.context\";\n\nconst OptionsProvider = ({ children }: { children: React.ReactChildren | React.ReactChild | null }) => {\n  const [options, setOptions] = useState({ selectedDeck: \"ES-EN\" });\n  const storage = useContext(Storage);\n\n  useEffect(() => {\n    storage.getValue(\"preferences\")\n      .then((storedOptions: Options) => {\n        if (!storedOptions)\n          return;\n        if (storedOptions.selectedDeck === options.selectedDeck)\n          return;\n\n        setOptions(storedOptions);\n      });\n  }, []);\n\n  return (\n    <OptionsContext.Provider value={{ options, setOptions }}>\n      {children}\n    </OptionsContext.Provider>\n  );\n};\n\nexport default OptionsProvider;\n","import React, { useState, useEffect } from 'react'\nimport type { Card } from '../../types/types'\n/*\n\n*/\ntype FlashcardProps = { deck: Card[] };\n\nexport const Flashcard = ({ deck }: FlashcardProps): JSX.Element => {\n    const [index, setIndex] = useState<number>(0);\n    const [isFront, setIsFront] = useState<boolean>(true);\n    const showRandomCard = () => {\n        setIndex(Math.floor(Math.random() * deck.length));\n        setIsFront(true);\n    };\n\n    useEffect(() => {\n        showRandomCard();\n    }, [deck]);\n\n    const flipcard = () => {\n        setIsFront(!isFront);\n    };\n\n    const card = deck[index] ?? { front: \"\", back: \"\" };\n    const text = isFront ? card.front : card.back;\n    return (\n        <div>\n            <div onClick={flipcard} style={{ \"position\": \"relative\", \"height\": \"300px\", \"width\": \"500px\", \"border\": \"2px solid black\", \"margin\": \"0 auto\", \"backgroundColor\":\"#f0ffff\" }}>\n                <h1>{text}</h1>\n                <div style={{ \"position\": \"absolute\", \"bottom\": \"0\" }}>\n                    <span>click card to show reverse</span>\n                </div>\n            </div>\n            <button style={{ \"width\": \"200px\", \"border\": \"rgb(30,30,30)\", \"fontSize\": \"24px\",\"backgroundColor\":\"#88ABFB\", \"marginTop\":\"20px\" }} onClick={showRandomCard}>Random Card</button>\n        </div>\n    )\n}","import { useContext } from \"react\";\nimport Storage from \"../../providers/storage.provider\";\nimport OptionsContext from \"./options.context\";\nimport { Options } from \"./options.types\";\n\nexport const useOptions = () => {\n  const { options, setOptions } = useContext(OptionsContext);\n  const storage = useContext(Storage);\n\n  const updateOptions = (options: Options) => {\n    storage.setValue(\"preferences\", options)\n      .then(() => setOptions(options));\n  };\n\n  return [options, updateOptions] as const;\n};\n\n/*\n  TODO:\n    integrate into Options component\n    integrate into FlashCard page\n    integrate into Deck hook\n\n    - make an OptionsProvider component which wraps OptionsContext and\n      - handles state / setState so that App doesn't need to\n      - handles the initialization useEffect so that nothing further down the app needs to \n*/","import { useContext } from 'react'\nimport StorageProvider from '../../providers/storage.provider'\nimport {\n    // usePreferences,\n    Preferences\n} from './usePreferences.hook'\nimport {useOptions} from './useOptions.hook'\n\nconst deckManifest = [\n    {\n        fileName: \"ES-EN\",\n        title: \"Spanish to English\"\n    },\n    {\n        fileName: \"FR-EN\",\n        title: \"French to English\"\n    },\n    {\n        fileName: \"EN-ES\",\n        title: \"English to Spanish\"\n    },\n    {\n        fileName: \"EN-FR\",\n        title: \"English to French\"\n    },\n];\n\ntype OptionsProps = {\n  onUpdate?: (preferences: Preferences) => void;\n};\n\nexport const Options = ({ onUpdate }: OptionsProps) => {\n    const storage = useContext(StorageProvider);\n    const [options, updateOptions] = useOptions();\n    const updateSelectedDeck = (e: any) => {\n      const filename = (e.target as HTMLInputElement).value;\n      const newOptions = {\n        ...options,\n        selectedDeck: filename\n      };\n\n      updateOptions(newOptions);\n    };\n\n    return (\n        <section>\n            <fieldset onChange={updateSelectedDeck}>\n                <legend>Choose your deck</legend>\n                <ul style={{\"display\": \"inline-block\", \"listStyle\": \"none\", paddingLeft: \"0\" }}>\n                    {deckManifest.map((deck) => \n                        <li style={{ \"textAlign\": \"left\"}}>\n                            <label>\n                                <input\n                                    value={deck.fileName}\n                                    name=\"deck\"\n                                    type=\"radio\"\n                                    checked={options.selectedDeck === deck.fileName}\n                                    />&nbsp;\n                                        <span>{deck.title}</span>\n                            </label>\n                        </li>\n                    )}\n                </ul>\n            </fieldset>\n        </section>\n\n    )\n\n}\n\n","import {useContext, useEffect, useState, useCallback} from 'react'\nimport Storage from '../providers/storage.provider'\nimport {useOptions} from '../features/options/useOptions.hook'\nimport {getDeck} from '../services/deck-loader/deck-loader.web'\nimport {Deck} from '../types/types'\n\nexport const useDeck = () => {\n  const [options] = useOptions();\n  const [initialized, setInitialized] = useState(false);\n  const [deck, setDeck] = useState<Deck>([]);\n  const storage = useContext(Storage);\n\n  const loadDeck = (filename: string) =>\n    getDeck(\"/data\", filename)\n      .then(deck =>\n        storage.setValue(\"deck\", deck)\n          .then(() => setDeck(deck)));\n\n  useEffect(() => {\n    const setExistingDeck = (deck: Deck) =>\n      Promise.resolve(deck).then(setDeck);\n\n    storage.getValue(\"deck\")\n      .then(deck => !!deck\n        ? setExistingDeck(deck)\n        : loadDeck(options.selectedDeck))\n      .then(() => setInitialized(true));\n  }, []);\n\n  useEffect(() => {\n    if (!initialized) return;\n    loadDeck(options.selectedDeck);\n  },[options.selectedDeck]);\n\n  return [deck];\n}","\nexport const getDeck = (root: string, name: string) =>\n  fetch(`${root}/${name}.json`).then(res => res.json());\n","// TODO: refactor this to be platform-agnostic\nimport { Flashcard } from '../features/flashcard/flashcard';\nimport {Options} from '../features/options/Options'\nimport { useOptions } from \"../features/options/useOptions.hook\";\nimport { useDeck } from \"./useDeck.hook\";\n\nconst FlashCardPage = ({}) => {\n  const [options] = useOptions();\n  const [deck] = useDeck(); \n\n  if (!deck.length) {\n    return <article>...loading</article>;\n  }\n\n  return (\n    <article>\n      <h1 className=\"logo\">Flashcardly!</h1>\n      <div>{options.selectedDeck}</div>\n      <section>\n        <Flashcard deck={deck}/>\n      </section>\n      <section style={{ paddingTop: \"2rem\" }}>\n        <Options />\n      </section>\n    </article>\n  );\n};\n\nexport default FlashCardPage;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Storage from \"./services/storage/storage.web\";\nimport StorageProvider from \"./providers/storage.provider\";\nimport OptionsProvider from \"./features/options/options.provider\";\nimport FlashCardPage from \"./pages/flashcard.page\";\n\nfunction App() {\n  return (\n    <StorageProvider.Provider value={Storage}>\n      <OptionsProvider>\n        <div className=\"App\">\n          <FlashCardPage />\n        </div>\n      </OptionsProvider>\n    </StorageProvider.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}